# .github/workflows/promote.yml
name: Promote Podinfo Image to Production

on:
  workflow_dispatch:
    inputs:
      image_digest:
        description: "Immutable image digest to promote (sha256:...)"
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  IMAGE_NAME: podinfo
  DEPLOY_ENV: prod # This is used as deploy_env in the promote job
  AWS_ACCOUNT_ID: "910246205478"

jobs:
  approval:
    name: Manual Approval Gate
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.aws.amazon.com/
    steps:
      - name: Confirm Promotion
        run: echo "Awaiting manual approval before promoting to production for image ${{ github.event.inputs.image_digest }}"

  promote:
    name: Deploy to Production (Dual-Target)
    runs-on: ubuntu-latest
    needs: approval
    timeout-minutes: 60
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq, jq, and zip
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip
          # Ensure yq is installed exactly as in the dev workflow
          curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify image signature (cosign keyless)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_DIGEST: ${{ github.event.inputs.image_digest }}
          COSIGN_EXPERIMENTAL: "1" # Add experimental flag as in deploy.yaml
        run: |
          set -euo pipefail
          echo "Verifying image signature for $ECR_REGISTRY/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST"

          # --- Install latest stable Cosign (Copied from deploy.yaml) ---
          COSIGN_VERSION=$(curl -fsSL https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r .tag_name)
          if [ -z "$COSIGN_VERSION" ] || [ "$COSIGN_VERSION" = "null" ]; then
            COSIGN_VERSION="v2.2.4" # fallback safe default
          fi
          echo "Installing Cosign $COSIGN_VERSION"
          curl -fsSL -o /usr/local/bin/cosign \
            "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x /usr/local/bin/cosign
          cosign version
          
          # --- Verify image signature (keyless OIDC mode) ---
          # Use the exact command from deploy.yaml
          cosign verify \
            "$ECR_REGISTRY/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/.+"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      # -------------------------------------------------
      # LAMBDA: Provision infra (re-apply) + trigger CodeDeploy
      # -------------------------------------------------
      - name: Deploy Lambda infra (Terraform)
        working-directory: infra/lambda
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_deploy_env: ${{ env.DEPLOY_ENV }} # Use env.DEPLOY_ENV (prod)
          TF_VAR_super_secret_token_arn: arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token
          TF_VAR_ecr_repo_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infra/lambda/${{ env.DEPLOY_ENV }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-state-locks"
          # Apply to update any variables that depend on image_digest or ensure infra is present/correct
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="deploy_env=${{ env.DEPLOY_ENV }}" \
            -var="super_secret_token_arn=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" \
            -var="ecr_repo_url=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}" \
            -var="image_digest=${{ github.event.inputs.image_digest }}"

      - name: Generate AppSpec for Lambda CodeDeploy (prod)
        working-directory: infra/lambda
        run: |
          set -euo pipefail
          FUNCTION_NAME="podinfo-${{ env.DEPLOY_ENV }}"
          ALIAS_NAME="live"

          # 1. Check if alias exists and get its current version
          # Use a more robust check that won't confuse errors with missing aliases
          ALIAS_EXISTS="false"
          CURRENT_VERSION=$(aws lambda get-alias \
            --function-name "$FUNCTION_NAME" \
            --name "$ALIAS_NAME" \
            --query FunctionVersion \
            --output text 2>/dev/null && ALIAS_EXISTS="true" || echo "")

          # 2. Publish a new version from $LATEST (which Terraform just updated)
          NEW_VERSION=$(aws lambda publish-version \
            --function-name "$FUNCTION_NAME" \
            --description "Promote ${{ github.event.inputs.image_digest }}" \
            --query Version \
            --output text)

          echo "Published new Lambda version: $NEW_VERSION"

          # 3. Handle initial deployment case (no alias exists yet)
          if [ "$ALIAS_EXISTS" = "false" ] || [ -z "$CURRENT_VERSION" ]; then
            echo "Alias does not exist. Creating alias pointing to version $NEW_VERSION"
            aws lambda create-alias \
              --function-name "$FUNCTION_NAME" \
              --name "$ALIAS_NAME" \
              --function-version "$NEW_VERSION" \
              --description "Production alias for podinfo Lambda" || {
                echo "Failed to create alias. Checking if it was created by another process..."
                CURRENT_VERSION=$(aws lambda get-alias \
                  --function-name "$FUNCTION_NAME" \
                  --name "$ALIAS_NAME" \
                  --query FunctionVersion \
                  --output text 2>/dev/null || echo "")
                if [ -n "$CURRENT_VERSION" ]; then
                  echo "Alias exists now. Continuing with CodeDeploy..."
                  ALIAS_EXISTS="true"
                else
                  echo "Error: Failed to create or find alias"
                  exit 1
                fi
              }

            # If we just created it, skip CodeDeploy for first deployment
            if [ "$ALIAS_EXISTS" = "false" ]; then
              echo "Alias created. Skipping CodeDeploy for initial deployment."
              echo "SKIP_LAMBDA_CODEDEPLOY=true" >> $GITHUB_ENV
              exit 0
            fi
          fi

          # 4. Validate we have different versions (required for CodeDeploy)
          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "Error: Current version ($CURRENT_VERSION) and new version ($NEW_VERSION) are the same."
            echo "This means no changes were detected. Skipping deployment."
            echo "SKIP_LAMBDA_CODEDEPLOY=true" >> $GITHUB_ENV
            exit 0
          fi

          if ! [[ "$NEW_VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: Failed to publish new Lambda version"
            exit 1
          fi

          echo "AppSpec CurrentVersion: $CURRENT_VERSION"
          echo "AppSpec TargetVersion: $NEW_VERSION"

          # 5. Create the AppSpec with the actual published version
          cat > appspec.yaml <<EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::Lambda::Function
                Properties:
                  Name: "$FUNCTION_NAME"
                  Alias: "$ALIAS_NAME"
                  CurrentVersion: "$CURRENT_VERSION"
                  TargetVersion: "$NEW_VERSION"
          EOF

      - name: Create Lambda CodeDeploy Deployment (prod)
        if: env.SKIP_LAMBDA_CODEDEPLOY != 'true'
        env:
          ECR_REPO_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          
          # 1. Convert appspec.yaml to a compact JSON string and remove newlines (MATCHES deploy.yaml)
          APPSPEC_CONTENT=$(cat infra/lambda/appspec.yaml | yq -o=json -I=0 | tr -d '\n')
          
          # 2. Calculate SHA256 of that exact content string (MATCHES deploy.yaml)
          APPSPEC_SHA256=$(echo -n "$APPSPEC_CONTENT" | sha256sum | cut -d' ' -f1)
          
          # 3. Build the revision JSON using jq to ensure proper escaping (MATCHES deploy.yaml)
          jq -n \
            --arg content "$APPSPEC_CONTENT" \
            --arg sha "$APPSPEC_SHA256" \
            '{
              revisionType: "AppSpecContent",
              appSpecContent: {
                content: $content,
                sha256: $sha
              }
            }' > appspec-content.json

          # 4. Create the deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "podinfo-lambda-${{ env.DEPLOY_ENV }}" \
            --deployment-group-name "lambda-group-${{ env.DEPLOY_ENV }}" \
            --revision file://appspec-content.json \
            --description "Deploy $ECR_REPO_URL@${{ github.event.inputs.image_digest }}" \
            --query deploymentId --output text)
          echo "LAMBDA_CODEDEPLOY_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for Lambda CodeDeploy (prod)
        if: env.LAMBDA_CODEDEPLOY_ID != '' && env.SKIP_LAMBDA_CODEDEPLOY != 'true'
        # Added pipefail and changed to run always with status check later
        run: |
          set +e # Don't exit on failure here so we can get deployment details
          aws deploy wait deployment-successful --deployment-id "$LAMBDA_CODEDEPLOY_ID" || DEPLOYMENT_STATUS=$?
          set -e
          echo "DEPLOYMENT_STATUS=$DEPLOYMENT_STATUS" >> $GITHUB_ENV

      - name: Get CodeDeploy Deployment Status and Failure Details
        if: env.LAMBDA_CODEDEPLOY_ID != '' && env.DEPLOYMENT_STATUS != '0' && env.SKIP_LAMBDA_CODEDEPLOY != 'true'
        run: |
          echo "--- AWS CodeDeploy Failure Details for $LAMBDA_CODEDEPLOY_ID ---"
          aws deploy get-deployment --deployment-id "$LAMBDA_CODEDEPLOY_ID" --output json
          echo "---------------------------------------------------------"
          exit 1 # Fail the step if the waiter failed

      # -------------------------------------------------
      # EC2: Re-apply infra + deploy new bundle
      # -------------------------------------------------
      - name: Deploy EC2 infra (Terraform)
        working-directory: infra/ec2
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_deploy_env: ${{ env.DEPLOY_ENV }} # Use env.DEPLOY_ENV (prod)
          TF_VAR_super_secret_token_arn: arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token
          TF_VAR_ecr_repo_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infra/ec2/${{ env.DEPLOY_ENV }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-state-locks"
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="deploy_env=${{ env.DEPLOY_ENV }}" \
            -var="super_secret_token_arn=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" \
            -var="ecr_repo_url=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}" \
            -var="image_digest=${{ github.event.inputs.image_digest }}"

      - name: Create EC2 deployment bundle (prod)
        run: |
          mkdir -p deployment/scripts
          cp -r scripts/*.sh scripts/appspec.yml deployment/scripts/
          # Inject image digest into environment (optional)
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}@${{ github.event.inputs.image_digest }}" > deployment/scripts/.env
          echo "SUPER_SECRET_TOKEN_ARN=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" >> deployment/scripts/.env
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> deployment/scripts/.env
          cd deployment
          zip -r ../deployment.zip .

      - name: Upload bundle to S3
        # Match the naming convention from deploy.yaml
        run: |
          aws s3 cp deployment.zip s3://${{ secrets.TF_STATE_BUCKET }}/deployments/podinfo-${{ env.DEPLOY_ENV }}-${{ github.run_id }}.zip

      - name: Create EC2 CodeDeploy Deployment (prod)
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "podinfo-ec2-${{ env.DEPLOY_ENV }}" \
            --deployment-group-name "ec2-group-${{ env.DEPLOY_ENV }}" \
            --s3-location bucket=${{ secrets.TF_STATE_BUCKET }},key=deployments/podinfo-${{ env.DEPLOY_ENV }}-${{ github.run_id }}.zip,bundleType=zip \
            --description "Promote ${{ github.event.inputs.image_digest }}" \
            --query deploymentId --output text)
          echo "EC2_CODEDEPLOY_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for EC2 CodeDeploy (prod)
        if: env.EC2_CODEDEPLOY_ID != ''
        run: |
          aws deploy wait deployment-successful --deployment-id "$EC2_CODEDEPLOY_ID"

      # -------------------------------------------------
      # Final validation
      # -------------------------------------------------
      - name: Fetch prod endpoints
        run: |
          # Use env.DEPLOY_ENV (prod) in the path
          LAMBDA_URL=$(cd infra/lambda && terraform output -raw lambda_api_url 2>/dev/null || echo "")
          ALB_DNS=$(cd infra/ec2 && terraform output -raw alb_dns 2>/dev/null || echo "")
          echo "LAMBDA_URL=$LAMBDA_URL" >> $GITHUB_ENV
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Run smoke tests (prod)
        env:
          LAMBDA_URL: ${{ env.LAMBDA_URL }}
          ALB_DNS: ${{ env.ALB_DNS }}
        run: |
          set -euo pipefail
          if [ -n "$LAMBDA_URL" ]; then
            curl -sfS "$LAMBDA_URL/healthz"
          fi
          if [ -n "$ALB_DNS" ]; then
            curl -sfS "http://$ALB_DNS/healthz"
          fi

      - name: Promotion Summary
        run: |
          echo "### Production Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image digest: \`${{ github.event.inputs.image_digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- Promoted by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda URL: ${{ env.LAMBDA_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- ALB DNS: ${{ env.ALB_DNS }}" >> $GITHUB_STEP_SUMMARY