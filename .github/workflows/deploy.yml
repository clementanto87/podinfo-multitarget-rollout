name: Deploy Podinfo (Dev / Dual-target)

on:
  workflow_dispatch:
    inputs:
      image_digest:
        description: 'Image digest to deploy (sha256:...)'
        required: true
      deploy_env:
        description: 'Target environment (dev or prod)'
        required: true
        default: 'dev'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  IMAGE_NAME: podinfo
  AWS_ACCOUNT_ID: "910246205478"

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_env }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq, jq, and zip
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip
          curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify image signature (cosign keyless)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_DIGEST: ${{ github.event.inputs.image_digest }}
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          echo "Verifying image signature for $ECR_REGISTRY/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST"

          # --- Install latest stable Cosign ---
          COSIGN_VERSION=$(curl -fsSL https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r .tag_name)
          if [ -z "$COSIGN_VERSION" ] || [ "$COSIGN_VERSION" = "null" ]; then
            COSIGN_VERSION="v2.2.4" # fallback safe default
          fi
          echo "Installing Cosign $COSIGN_VERSION"
          curl -fsSL -o /usr/local/bin/cosign \
            "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x /usr/local/bin/cosign
          cosign version

          # --- Verify image signature (keyless OIDC mode) ---
          cosign verify \
            "$ECR_REGISTRY/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/.+"



      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      # -------------------------------------------------
      # LAMBDA: Provision infra + trigger CodeDeploy
      # -------------------------------------------------
      - name: Deploy Lambda infra (Terraform)
        working-directory: infra/lambda
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_deploy_env: ${{ github.event.inputs.deploy_env }}
          TF_VAR_super_secret_token_arn: arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token
          TF_VAR_ecr_repo_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infra/lambda/${{ github.event.inputs.deploy_env }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-state-locks"
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="deploy_env=${{ github.event.inputs.deploy_env }}" \
            -var="super_secret_token_arn=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" \
            -var="ecr_repo_url=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}" \
            -var="image_digest=${{ github.event.inputs.image_digest }}"

      - name: Generate AppSpec for Lambda CodeDeploy
        working-directory: infra/lambda
        run: |
          cat > appspec.yaml <<EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::Lambda::Function
                Properties:
                  Name: "podinfo-${{ github.event.inputs.deploy_env }}"
                  Alias: "live"
                  CurrentVersion: "1"
                  TargetVersion: "2"
          EOF

      - name: Create Lambda CodeDeploy Deployment
        env:
          ECR_REPO_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          # 1. Convert appspec.yaml to a single-line JSON string
          APPSPEC_CONTENT_JSON=$(cat infra/lambda/appspec.yaml | yq -o=json)
          
          # 2. Escape the JSON string for inclusion inside the 'content' field's double quotes
          APPSPEC_JSON_ESCAPED=$(echo "$APPSPEC_CONTENT_JSON" | jq -R -s -c .)
          
          # 3. FIX: Calculate SHA256 of the *raw* AppSpec file content, removing the trailing newline
          APPSPEC_SHA256=$(cat infra/lambda/appspec.yaml | tr -d '\n' | sha256sum | cut -d' ' -f1)
          
          # 4. Create the final revision JSON file
          cat > appspec-content.json <<EOF
          {
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": $APPSPEC_JSON_ESCAPED,
              "sha256": "$APPSPEC_SHA256"
            }
          }
          EOF
          
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "podinfo-lambda-${{ github.event.inputs.deploy_env }}" \
            --deployment-group-name "lambda-group-${{ github.event.inputs.deploy_env }}" \
            --revision file://appspec-content.json \
            --description "Deploy $ECR_REPO_URL@${{ github.event.inputs.image_digest }}" \
            --query deploymentId --output text)
          echo "LAMBDA_CODEDEPLOY_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for Lambda CodeDeploy
        if: env.LAMBDA_CODEDEPLOY_ID != ''
        run: |
          aws deploy wait deployment-successful --deployment-id "$LAMBDA_CODEDEPLOY_ID"
      
      
      
      

      # -------------------------------------------------
      # EC2: Provision infra + create deployment bundle
      # -------------------------------------------------
      - name: Deploy EC2 infra (Terraform)
        working-directory: infra/ec2
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_deploy_env: ${{ github.event.inputs.deploy_env }}
          TF_VAR_super_secret_token_arn: arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token
          TF_VAR_ecr_repo_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infra/ec2/${{ github.event.inputs.deploy_env }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-state-locks"
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="deploy_env=${{ github.event.inputs.deploy_env }}" \
            -var="super_secret_token_arn=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" \
            -var="ecr_repo_url=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}" \
            -var="image_digest=${{ github.event.inputs.image_digest }}"

      - name: Create EC2 deployment bundle
        run: |
          mkdir -p deployment/scripts
          cp -r scripts/*.sh scripts/appspec.yml deployment/scripts/
          # Inject image digest into environment (optional)
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}@${{ github.event.inputs.image_digest }}" > deployment/scripts/.env
          echo "SUPER_SECRET_TOKEN_ARN=arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:secret:podinfo/super-secret-token" >> deployment/scripts/.env
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> deployment/scripts/.env
          cd deployment
          zip -r ../deployment.zip .

      - name: Upload bundle to S3
        run: |
          aws s3 cp deployment.zip s3://${{ secrets.TF_STATE_BUCKET }}/deployments/podinfo-${{ github.event.inputs.deploy_env }}-${{ github.run_id }}.zip

      - name: Create EC2 CodeDeploy Deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "podinfo-ec2-${{ github.event.inputs.deploy_env }}" \
            --deployment-group-name "ec2-group-${{ github.event.inputs.deploy_env }}" \
            --s3-location bucket=${{ secrets.TF_STATE_BUCKET }},key=deployments/podinfo-${{ github.event.inputs.deploy_env }}-${{ github.run_id }}.zip,bundleType=zip \
            --description "Deploy ${{ github.event.inputs.image_digest }}" \
            --query deploymentId --output text)
          echo "EC2_CODEDEPLOY_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for EC2 CodeDeploy
        if: env.EC2_CODEDEPLOY_ID != ''
        run: |
          aws deploy wait deployment-successful --deployment-id "$EC2_CODEDEPLOY_ID"    
      
      
      
      

      # -------------------------------------------------
      # Final smoke tests
      # -------------------------------------------------
      - name: Fetch endpoints
        run: |
          LAMBDA_URL=$(cd infra/lambda && terraform output -raw lambda_api_url 2>/dev/null || echo "")
          ALB_DNS=$(cd infra/ec2 && terraform output -raw alb_dns 2>/dev/null || echo "")
          echo "LAMBDA_URL=$LAMBDA_URL" >> $GITHUB_ENV
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Run final smoke tests
        env:
          LAMBDA_URL: ${{ env.LAMBDA_URL }}
          ALB_DNS: ${{ env.ALB_DNS }}
        run: |
          set -euo pipefail
          if [ -n "$LAMBDA_URL" ]; then
            curl -sfS "$LAMBDA_URL/healthz"
          fi
          if [ -n "$ALB_DNS" ]; then
            curl -sfS "http://$ALB_DNS/healthz"
          fi

      - name: Summary
        run: |
          echo "### Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.deploy_env }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.IMAGE_NAME }}@${{ github.event.inputs.image_digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda URL: ${{ env.LAMBDA_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- ALB DNS: ${{ env.ALB_DNS }}" >> $GITHUB_STEP_SUMMARY